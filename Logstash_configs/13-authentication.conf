filter {
#due to the limits of if/match grok, be careful with the sequences of events processed. Match against previous check if you change the order of this filter

  if [type] == "authentication" {
    #grok : highlighting of sudo sessions
    grok {
      patterns_dir => "./patterns"
      match => { "message" => "%{AUTHDATE} %{HOSTNAME:hostname} %{WORD:program}\[%{PID:pid}\]: pam_unix\(%{AUTHMETHOD}:session\): session %{STATUS:status} for user %{USER:priviledged_user} by %{USER:user}" }
      add_field => [ "auth", "sudo %{status}" ]
      tag_on_failure => ["not_sudo_session"]
      add_tag => ["sudo_session"]
    }

    if("not_sudo_session" in [tags]){
    #grok : highlighting of commands launched with sudo
      grok {
        patterns_dir => "./patterns"
        match => {"message"=>"%{AUTHDATE} %{HOSTNAME:hostname} sudo: %{USER:user}\s:%{GREEDYDATA:tty}; PWD=%{UNIXPATH:current_dir} ; USER=%{USER:priviledged_user} ; COMMAND=%{GREEDYDATA:program}"}
        tag_on_failure => ["not_sudo_pgm"]
        add_tag => ["sudo_pgm"]
        }
      }

    if("not_sudo_pgm" in [tags]){
    #grok : dropping CRON-generated input
      grok {
        patterns_dir => "./patterns"
        match => {"message"=>"%{AUTHDATE} %{HOSTNAME:hostname} CRON%{GREEDYDATA}"}
        tag_on_failure => ["not_CRON"]
        drop_if_match => true
        }
    }

    if("not_CRON" in [tags]){
      #grok : tagging authentication failures
      grok {
        patterns_dir => "./patterns"
        match => {"message"=>"%{AUTHDATE} %{HOSTNAME:hostname} %{WORD:program}\[%{PID:pid}\]: pam_authenticate:%{GREEDYDATA:auth_msg}"}
        add_tag => ["authentication_failure"]
        tag_on_failure => ["not_auth_fail1"]
      }
     }

    if("not_auth_type1" in [tags]){
    #grok : tagging authentication failures
      grok {
        patterns_dir => "./patterns"
        match => {"%{AUTHDATE} %{HOSTNAME:hostname} %{WORD:program}\[%{PID:pid}\]: FAILED %{WORD:program} for %{USER:priviledged_user} by %{USER:user}"}
        add_tag => ["authentication_failure"]
        add_tag => ["auth_fail2"]
      }
    }

    if("authentication_failure" not in [tags]){
      #grok : greedy catching of all authentication msgs
      grok {
        patterns_dir => "./patterns"
        match => {"message"=>"%{AUTHDATE} %{HOSTNAME:hostname} %{WORD:program}\[%{PID:pid}\]:%{GREEDYDATA:auth_msg}"}
        tag_on_failure => ["auth_standard_fail"]
        add_tag => ["auth_standard"]
      }
    }
  #updating timestamp with locale
  date {
      locale => "en"
      match => ["message", "YYYY-MM-dd;HH:mm:ss.SSS"]
      timezone => "Indian/Mauritius"
      target => "@timestamp"
  }

  #we drop the events which do not match anything
  if "_grokparsefailure" in [tags] {
#    drop{}
  }

  }#end authentication filter
}

